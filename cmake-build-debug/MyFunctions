template<typename T>
ll fastPower(T a, T b, ll res = 1){
    if(!b) return res;
    if(b & 1)
        res = modulo(res, a, MOD);
//        res = res * a;
    return fastPower(modulo(a, a, MOD), (b >> 1), res);
}

template<typename T>
ll fastP(T a, T b){
    ll res = 1;
    while(b > 0){
        if(b & 1) res = ((res) * (a));
        //		if(b & 1) res = ((res % MOD) * (a % MOD)) % MOD; //if you have big calculations, remove these comments
        //		if(b & 1) res = ((res % 10) * (a % 10)) % 10;
        //		a = ((a % 10) * (a % 10)) % 10;
        a *= a;
        b /= 2;
    }
    return res;
}

ll bigIntMod(string num, int m) {
    ll res = 0;
    for (int i = 0; i < num.size(); i++) res = (res * 10 + int(num[i] - '0')) % m;
    return res;
}
ool binarySearch(vector<int> &v, int n, int target){
	int l = 0, r = n-1;
	while(l <= r){
		int m = l + (r-l) / 2;
		if(v[m] == target) return true;
		else (v[m] > target ? r = m - 1 : l = m + 1);

	} return false;
}
int lowerBound(vector<int> &v, int n, int target){
	int l = 0, r = n - 1, best = 0;
	while(r >= l){
		int m = l + (r-l) / 2;
		(v[m] <= target ? l = m+1, best = m+1 : r = m-1);
	}
	return best;
}
int upperBound(vector <int> &v, int n , int target){
	int l = 0, r = n - 1, best = n+1;
	while(r >= l){
		int m = l + (r-l) / 2;
		(v[m] >= target ? r = m-1, best = m+1 : l = m+1);
	}
	return best;
}
int mod(string num, int a){
    int res = 0;
    for (int i = 0; i < num.length(); i++)
         res = (res * 10 + (int)num[i] - '0') % a;
    return res;
}
/*int comp(long double a, long double b){
	if(fabs(a-b) <= 1e-10) return 0;
	return a > b ? 1 : -1;
}*/
ll power(ll a, ll b, ll Mod){
	ll res = 1;
	while(b > 0){
		if(b % 2) res = (res * a) % Mod;
		a = (a * a) % Mod ;
		b /= 2;
	}
	return res;
}
bool prime(ll n){
	if(n == 2) return true;
    if(n <= 1 || n % 2 == 0) return false;
    for(int i = 3; i * i <= n; i++){
    	if (n % i == 0) return false;
	}return true;
}
ll MOD(string &n, ll a){
	ll res = 0;
	for(int i = 0 ; i < n.size(); i++)
		res = (res * 10 + (int)n[i]-'0') % a;
	return res;
}
int freq(int n){
	int c = 0;
	while(n > 0){
		int t = 0;
		t = n % 10;
		if(t == 0) c++;
		n /= 10;
	}return c;
}
int gcd(int a, int b){
	return b ? gcd(b, a % b) : a;
}
int lcm(int a, int b){
	return a / gcd(a,b) * b;
}
bool sieve(ll x){
	vector<bool> prime(1, true);
	prime[0] = prime[1] = 0;
	for(int i = 2 ; i*i <= 1; i++){
		if(prime[i]){
			for(int j = 2*i; j <= 1 ; j += i) prime[j] = 0;
		}
	}if(prime[x]) return true;
	 else return false;
}

